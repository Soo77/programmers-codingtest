ch6-2 클래스와 객체
클래스의 정의 : 클래스란 객체를 정의해 놓은 것
클래스의 용도 : 클래스는 객체를 생성하는데 사용
객체의 정의 : 실제로 존재하는 것. 사물 또는 개념
객체의 용도 : 객체가 가지고 있는 기능과 속성에 따라 다름.

Q. 클래스가 왜 필요한가?
A. 객체를 생성하기 위해
Q. 객체가 왜 필요한가?
A. 객체를 사용하기 위해
Q. 객체를 사용한다는 것은?
A. 객체가 가진 속성과 기능을 사용하려고

ch6-3 객체의 구성 요소 - 속성과 기능
객체 = 속성(변수) + 기능(메서드)

ch6-4 객체와 인스턴스
객체 : 모든 인스턴스를 대표하는 일반적 용어
인스턴스 : 특정 클래스로부터 생성된 객체

ch6-11 선언 위치에 따른 변수의 종류
클래스영역: iv(인스턴스 변수),cv(클래스 변수)
메서드영역: lv(로컬변수)

ch6-14 메서드란?
메서드의 장점
- 코드의 중복을 줄일 수 있다.
- 코드의 관리가 쉽다.
- 코드를 재사용할 수 있다.
- 코드가 간결해서 이해하기 쉬워진다.

ch6-22 호출 스택(call stack)
메서드 수행에 필요한 메모리가 제공되는 공간.
메서드가 호출되면 호출스택에 메모리 할당, 종료되면 해제.

ch6-24 매개변수
기본형 매개변수 : 변수의 값을 읽기만 할 수 있다.
참조형 매개변수 : 변수의 값을 읽고 변경할 수 있다.

ch6-30 오버로딩(overloading)
오버로딩이 성립하기 위한 조건
1. 메서드 이름이 같아야 한다.
2. 매개변수의 개수 또는 타입이 달라야 한다.
3. 반환 타입은 영향없다.

ch6-32 생성자(constructor)
- 인스턴스가 생성될 때마다 호출되는 '인스턴스 초기화 메서드'
- 인스턴스 생성시 수행할 작업(iv 초기화)에 사용
- 이름이 클래스 이름과 같아야 한다.
- 리턴값이 없다.(void 안붙임. 항상 반환값이 없으니까.)
- 모든 클래스는 반드시 생성자를 가져야 한다.

ch6-33 기본 생성자(default constructor)
- 매개변수가 없는 생성자
- 생성자가 하나도 없을 때만, 컴파일러가 자동 추가

ch6-36 생성자 this()
- 생성자에서 다른 생성자 호출할 대 사용
- 다른 생성자 호출시 첫 줄에서만 사용가능

ch6-37 참조변수 this
- 인스턴스 자신을 가리키는 참조변수
- 인스턴스 메서드(생성자 포함)에서 사용가능
- 지역변수(lv)와 인스턴스 변수(iv)를 구별할 때 사용

ch6-38 변수의 초기화
- 지역변수(lv)는 수동 초기화 해야함
- 멤버젼수(iv,cv)는 자동 초기화 된다.
- 타입에 따른 기본값
boolean : false
char : '\u0000'
byte, short, int : 0
long : 0L
float : 0.0f
double : 0.0d or 0.0
참조형 : null

ch6-39 멤버변수의 초기화
- 자동초기화 0
- 간단초기화 = 
- 복잡초기화 {}, cv-> static{}, iv-> 생성자
